import streamlit as st
import pandas as pd
import altair as alt
from datetime import datetime, timedelta

USERS_FILE = "users.csv"
DATA_FILE = "water_usage.csv"

# ----------------- Safe rerun -----------------
def safe_rerun():
    if hasattr(st, "rerun"):
        st.rerun()
    elif hasattr(st, "experimental_rerun"):
        st.experimental_rerun()
    else:
        st.warning("‚ö†Ô∏è Phi√™n b·∫£n Streamlit c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ rerun t·ª± ƒë·ªông.")

# ----------------- Gradient Background -----------------
def set_background():
    st.markdown(
        """
        <style>
        .stApp { background: linear-gradient(120deg, #eff6ff, #dbeafe); }
        .stButton>button { background-color: #2563EB; color: white; border-radius: 10px; padding: 0.6em 1.2em; }
        </style>
        """, unsafe_allow_html=True
    )

# ----------------- Login & Register -----------------
def login_register():
    set_background()
    st.markdown("<h1 style='text-align:center;color:#05595b;'>üíß WATER LOOP üíß </h1>", unsafe_allow_html=True)
    if not hasattr(st.session_state, "logged_in"):
        st.session_state.logged_in = False

    mode = st.radio("Ch·ªçn ch·∫ø ƒë·ªô:", ["ƒêƒÉng nh·∫≠p", "ƒêƒÉng k√Ω"], horizontal=True)
    username = st.text_input("üë§ T√™n ƒëƒÉng nh·∫≠p")
    password = st.text_input("üîí M·∫≠t kh·∫©u", type="password")

    # --- Load users ---
    try:
        users = pd.read_csv(USERS_FILE)
        if "address" not in users.columns:
            users["address"] = ""
    except FileNotFoundError:
        users = pd.DataFrame(columns=[
            "username","password","house_type","location","address","daily_limit","entries_per_day","reminder_times"
        ])

    if mode=="ƒêƒÉng k√Ω":
        default_house_types = ["Chung c∆∞","Nh√† ri√™ng","Bi·ªát th·ª±","Nh√† tr·ªç","Khu t·∫≠p th·ªÉ","K√≠ t√∫c x√°"]
        house_type = st.selectbox("üè† Lo·∫°i h·ªô gia ƒë√¨nh", default_house_types + ["‚ûï Kh√°c"])
        if house_type == "‚ûï Kh√°c":
            house_type = st.text_input("Nh·∫≠p lo·∫°i nh√† c·ªßa b·∫°n:")

        location = st.selectbox("üìç Khu v·ª±c", [
            "T·ªânh Tuy√™n Quang","T·ªânh L√†o Cai","T·ªânh Th√°i Nguy√™n","T·ªânh Ph√∫ Th·ªç","T·ªânh B·∫Øc Ninh","T·ªânh H∆∞ng Y√™n",
            "Th√†nh ph·ªë H·∫£i Ph√≤ng","T·ªânh Ninh B√¨nh","T·ªânh Qu·∫£ng Tr·ªã","Th√†nh ph·ªë ƒê√† N·∫µng","T·ªânh Qu·∫£ng Ng√£i",
            "T·ªânh Gia Lai","T·ªânh Kh√°nh Ho√†","T·ªânh L√¢m ƒê·ªìng","T·ªânh ƒê·∫Øk L·∫Øk","Th√†nh ph·ªë H·ªì Ch√≠ Minh","T·ªânh ƒê·ªìng Nai",
            "T·ªânh T√¢y Ninh","Th√†nh ph·ªë C·∫ßn Th∆°","T·ªânh Vƒ©nh Long","T·ªânh ƒê·ªìng Th√°p","T·ªânh C√† Mau","T·ªânh An Giang",
            "Th√†nh ph·ªë H√† N·ªôi","Th√†nh ph·ªë Hu·∫ø","T·ªânh Lai Ch√¢u","T·ªânh ƒêi·ªán Bi√™n","T·ªânh S∆°n La","T·ªânh L·∫°ng S∆°n",
            "T·ªânh Qu·∫£ng Ninh","T·ªânh Thanh Ho√°","T·ªânh Ngh·ªá An","T·ªânh H√† Tƒ©nh","T·ªânh Cao B·∫±ng"
        ])
        address = st.text_input("üè† ƒê·ªãa ch·ªâ c·ª• th·ªÉ (s·ªë nh√†, ƒë∆∞·ªùng...)")

        daily_limit = st.number_input("‚öñÔ∏è Ng∆∞·ª°ng n∆∞·ªõc h√†ng ng√†y (L√≠t)", min_value=50, value=200)
        entries_per_day = st.slider("üîî S·ªë l·∫ßn nh·∫≠p d·ªØ li·ªáu/ng√†y", 1, 5, 3)

        reminder_times = st.multiselect(
            "‚è∞ Ch·ªçn gi·ªù nh·∫Øc nh·ªü trong ng√†y (t·ªëi ƒëa 5 l·∫ßn)",
            options=[f"{h:02d}:00" for h in range(0,24)],
            default=["08:00","12:00","18:00"]
        )
        if len(reminder_times) > 5:
            st.warning("‚ö†Ô∏è Ch·ªâ ch·ªçn t·ªëi ƒëa 5 gi·ªù nh·∫Øc nh·ªü. M·∫∑c ƒë·ªãnh gi·ªØ 5 gi·ªù ƒë·∫ßu.")
            reminder_times = reminder_times[:5]

        if st.button("ƒêƒÉng k√Ω", use_container_width=True):
            if username in users["username"].values:
                st.error("‚ùå T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i.")
            else:
                new_user = pd.DataFrame([{
                    "username": username,
                    "password": password,
                    "house_type": house_type,
                    "location": location,
                    "address": address,
                    "daily_limit": daily_limit,
                    "entries_per_day": entries_per_day,
                    "reminder_times": ",".join(reminder_times)
                }])
                users = pd.concat([users,new_user], ignore_index=True)
                users.to_csv(USERS_FILE,index=False)
                st.success("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng, vui l√≤ng ƒëƒÉng nh·∫≠p.")

    elif mode=="ƒêƒÉng nh·∫≠p":
        if st.button("ƒêƒÉng nh·∫≠p", use_container_width=True):
            user_row = users[(users["username"]==username)&(users["password"]==password)]
            if user_row.empty:
                st.error("‚ùå Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u.")
            else:
                st.session_state.logged_in = True
                st.session_state.username = username
                st.session_state.daily_limit = user_row.iloc[0]["daily_limit"]
                st.session_state.entries_per_day = user_row.iloc[0]["entries_per_day"]
                st.session_state.reminder_times = user_row.iloc[0]["reminder_times"].split(",") if pd.notna(user_row.iloc[0]["reminder_times"]) else []
                st.session_state.address = user_row.iloc[0]["address"] if "address" in user_row.columns else ""
                st.success("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
                safe_rerun()

# ----------------- Dashboard -----------------
DEFAULT_ACTIVITIES = {
    "üöø T·∫Øm":50,"üß∫ Gi·∫∑t qu·∫ßn √°o":70,"üç≥ N·∫•u ƒÉn":20,"üå± T∆∞·ªõi c√¢y":15,
    "üßπ Lau nh√†":25,"üõµ R·ª≠a xe m√°y":40,"üöó R·ª≠a √¥ t√¥":150,"üö≤ R·ª≠a xe ƒë·∫°p":10
}

# H·ªó tr·ª£: chia ƒë·ªÅu s·ªë l∆∞·ª£ng cho nhi·ªÅu ho·∫°t ƒë·ªông trong c√πng 1 l·∫ßn nh·∫≠p
def explode_and_allocate(df, activity_col='activity', amount_col='amount'):
    df = df.copy()
    df['activity_list'] = df[activity_col].fillna('Kh√¥ng x√°c ƒë·ªãnh').astype(str).str.split(', ')
    df = df.explode('activity_list')
    # m·ªói d√≤ng ban ƒë·∫ßu c√≥ n ho·∫°t ƒë·ªông -> chia ƒë·ªÅu l∆∞·ª£ng n∆∞·ªõc cho m·ªói ho·∫°t ƒë·ªông
    counts = df.groupby(df.index)['activity_list'].transform('count')
    df['alloc_amount'] = df[amount_col] / counts
    return df

# L∆∞u ho·∫∑c g·ªôp v√†o nh√≥m nh·∫≠p trong 30 ph√∫t
def save_or_merge_entry(data, username, house_type, location, addr_input, activity, amount, note_text, date_input):
    now = datetime.now()
    # ƒë·∫£m b·∫£o c√≥ c·ªôt date/time
    if data.empty:
        data = pd.DataFrame(columns=["username","house_type","location","address","date","time","activity","amount","note"]) 

    # chu·∫©n h√≥a m·ªôt v√†i c·ªôt
    if 'note' not in data.columns:
        data['note'] = ""

    # t√¨m entry g·∫ßn nh·∫•t c·ªßa user
    user_entries = data[data['username']==username].copy()
    if not user_entries.empty:
        user_entries['datetime'] = pd.to_datetime(user_entries['date'].astype(str) + ' ' + user_entries['time'].astype(str))
        user_entries = user_entries.sort_values('datetime', ascending=False)
        last_idx = user_entries.index[0]
        last_dt = user_entries.loc[last_idx, 'datetime']
        if (now - last_dt) <= timedelta(minutes=30):
            # g·ªôp
            existing_acts = str(data.at[last_idx, 'activity']) if pd.notna(data.at[last_idx, 'activity']) else ''
            existing_list = [a for a in existing_acts.split(', ') if a]
            if activity not in existing_list:
                existing_list.append(activity)
            data.at[last_idx, 'activity'] = ', '.join(existing_list)
            data.at[last_idx, 'amount'] = float(data.at[last_idx, 'amount']) + float(amount)
            data.at[last_idx, 'time'] = now.strftime("%H:%M:%S")
            data.at[last_idx, 'date'] = now.strftime("%Y-%m-%d")
            # note: n·ªëi n·∫øu c√≥
            existing_note = str(data.at[last_idx, 'note']) if pd.notna(data.at[last_idx, 'note']) else ''
            if note_text:
                if existing_note:
                    if note_text not in existing_note:
                        data.at[last_idx, 'note'] = existing_note + ' || ' + note_text
                else:
                    data.at[last_idx, 'note'] = note_text
            # c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ n·∫øu kh√°c
            if addr_input and addr_input != data.at[last_idx, 'address']:
                data.at[last_idx, 'address'] = addr_input
            return data, True

    # n·∫øu kh√¥ng c√≥ entry g·∫ßn ho·∫∑c user ch∆∞a c√≥ entry -> t·∫°o m·ªõi
    new_entry = {
        "username": username,
        "house_type": house_type,
        "location": location,
        "address": addr_input,
        "date": date_input.strftime("%Y-%m-%d"),
        "time": now.strftime("%H:%M:%S"),
        "activity": activity,
        "amount": float(amount),
        "note": note_text if note_text else ""
    }
    data = pd.concat([data, pd.DataFrame([new_entry])], ignore_index=True)
    return data, False


def water_dashboard():
    set_background()
    st.markdown("<h2 style='color:#05595b;'>üíß Nh·∫≠p d·ªØ li·ªáu v·ªÅ s·ª≠ d·ª•ng n∆∞·ªõc</h2>", unsafe_allow_html=True)

    # --- Load d·ªØ li·ªáu ---
    try:
        data = pd.read_csv(DATA_FILE)
    except FileNotFoundError:
        data = pd.DataFrame(columns=["username","house_type","location","address","date","time","activity","amount","note"]) 

    username = st.session_state.username
    users = pd.read_csv(USERS_FILE)
    if "address" not in users.columns:
        users["address"] = ""
    user_info = users[users["username"]==username].iloc[0]

    house_type = user_info["house_type"]
    location = user_info["location"]
    address = user_info["address"] if "address" in user_info.index else ""
    daily_limit = float(st.session_state.daily_limit)
    reminder_times = st.session_state.reminder_times

    # --- Reminder ---
    now = datetime.now()
    for t in reminder_times:
        try:
            h,m = map(int, t.split(":"))
        except:
            continue
        reminder_time = now.replace(hour=h, minute=m, second=0, microsecond=0)
        delta_minutes = abs((now - reminder_time).total_seconds()/60)
        if delta_minutes <=5:
            st.info(f"‚è∞ Nh·∫Øc nh·ªü: ƒê√£ ƒë·∫øn gi·ªù nh·∫≠p d·ªØ li·ªáu n∆∞·ªõc! (Kho·∫£ng {t})")

    # --- Layout: tr√°i (nh·∫≠p + chart) | ph·∫£i (ghi ch√∫ + b·∫£ng) ---
    left, right = st.columns([2,1])

    with left:
        st.subheader("üìù Ghi nh·∫≠n ho·∫°t ƒë·ªông")
        col1, col2 = st.columns([3,1])
        with col1:
            activity = st.selectbox("Ch·ªçn ho·∫°t ƒë·ªông:", list(DEFAULT_ACTIVITIES.keys())+["‚ûï Kh√°c"])        
            if activity=="‚ûï Kh√°c":
                custom_act = st.text_input("Nh·∫≠p t√™n ho·∫°t ƒë·ªông:")
                if custom_act:
                    activity = custom_act
        with col2:
            amount = st.number_input("L∆∞·ª£ng n∆∞·ªõc (L√≠t)", min_value=1, value=DEFAULT_ACTIVITIES.get(activity,10))

        date_input = st.date_input("üìÖ Ng√†y s·ª≠ d·ª•ng", value=datetime.now().date(), min_value=datetime(2020,1,1).date(), max_value=datetime.now().date())
        addr_input = st.text_input("üè† ƒê·ªãa ch·ªâ", value=address)

        st.markdown("---")
        st.info("Ghi ch√∫: N·∫øu trong v√≤ng 30 ph√∫t b·∫°n nh·∫≠p nhi·ªÅu l·∫ßn, c√°c ho·∫°t ƒë·ªông s·∫Ω ƒë∆∞·ª£c g·ªôp v√†o 1 l·∫ßn nh·∫≠p chung.")

        note_quick = st.text_area("Ghi ch√∫ nhanh cho l·∫ßn nh·∫≠p n√†y (t√πy ch·ªçn):", height=80)

        if st.button("üíæ L∆∞u ho·∫°t ƒë·ªông", use_container_width=True):
            if not activity:
                st.warning("Vui l√≤ng ch·ªçn ho·∫∑c nh·∫≠p ho·∫°t ƒë·ªông.")
            else:
                data, merged = save_or_merge_entry(data, username, house_type, location, addr_input, activity, amount, note_quick, date_input)
                data.to_csv(DATA_FILE, index=False)
                if merged:
                    st.success("‚úÖ ƒê√£ g·ªôp v√†o l·∫ßn nh·∫≠p tr∆∞·ªõc trong v√≤ng 30 ph√∫t (c·∫≠p nh·∫≠t).")
                else:
                    st.success("‚úÖ ƒê√£ l∆∞u ho·∫°t ƒë·ªông m·ªõi!")
                safe_rerun()

        st.markdown("---")
        # --- B·ªô l·ªçc ph√¢n t√≠ch ---
        st.subheader("üîç B·ªô l·ªçc & Bi·ªÉu ƒë·ªì")
        user_data_all = data[data['username']==username].copy()
        if not user_data_all.empty:
            user_data_all['datetime'] = pd.to_datetime(user_data_all['date'].astype(str) + ' ' + user_data_all['time'].astype(str))
            all_addresses = user_data_all['address'].fillna('').unique().tolist()
            selected_addresses = st.multiselect("Ch·ªçn ƒë·ªãa ch·ªâ ƒë·ªÉ ph√¢n t√≠ch", options=all_addresses, default=all_addresses)
            filtered_data = user_data_all[user_data_all['address'].isin(selected_addresses)].copy()

            # Timeframe for totals chart
            time_frame = st.radio("Kho·∫£ng th·ªùi gian t·ªïng k·∫øt", ["Tu·∫ßn","Th√°ng"], horizontal=True)

            # --- Activity bar chart (ph√¢n b·ªï ƒë·ªÅu l∆∞·ª£ng n∆∞·ªõc khi 1 d√≤ng c√≥ nhi·ªÅu ho·∫°t ƒë·ªông) ---
            st.markdown("**üìä Bi·ªÉu ƒë·ªì theo ho·∫°t ƒë·ªông (t·ªïng L√≠t)**")
            if not filtered_data.empty:
                exploded = explode_and_allocate(filtered_data, activity_col='activity', amount_col='amount')
                act_sum = exploded.groupby('activity_list')['alloc_amount'].sum().reset_index().rename(columns={'activity_list':'activity','alloc_amount':'total_lit'})
                act_sum = act_sum.sort_values('total_lit', ascending=False)
                chart1 = alt.Chart(act_sum).mark_bar().encode(
                    x=alt.X('activity:N', sort='-y', title='Ho·∫°t ƒë·ªông'),
                    y=alt.Y('total_lit:Q', title='T·ªïng L√≠t'),
                    tooltip=['activity','total_lit'],
                    color='activity:N'
                ).properties(height=320)
                st.altair_chart(chart1, use_container_width=True)
            else:
                st.info("Ch∆∞a c√≥ d·ªØ li·ªáu cho b·ªô l·ªçc hi·ªán t·∫°i.")

            st.markdown("---")
            # --- T·ªïng k·∫øt tu·∫ßn/th√°ng (bar chart) ---
            st.markdown("**üìà T·ªïng l∆∞·ª£ng theo kho·∫£ng (Tu·∫ßn/Th√°ng)**")
            if not filtered_data.empty:
                if time_frame == 'Tu·∫ßn':
                    filtered_data['year'] = filtered_data['datetime'].dt.isocalendar().year
                    filtered_data['week'] = filtered_data['datetime'].dt.isocalendar().week
                    week_sum = filtered_data.groupby(['year','week'])['amount'].sum().reset_index()
                    week_sum['label'] = week_sum['year'].astype(str) + '-W' + week_sum['week'].astype(str)
                    chart2 = alt.Chart(week_sum).mark_bar().encode(
                        x=alt.X('label:N', sort='-y', title='Tu·∫ßn'),
                        y=alt.Y('amount:Q', title='T·ªïng L√≠t'),
                        tooltip=['label','amount']
                    ).properties(height=240)
                    st.altair_chart(chart2, use_container_width=True)
                else:
                    filtered_data['month'] = filtered_data['datetime'].dt.to_period('M').astype(str)
                    month_sum = filtered_data.groupby('month')['amount'].sum().reset_index()
                    chart2 = alt.Chart(month_sum).mark_bar().encode(
                        x=alt.X('month:N', sort='-y', title='Th√°ng'),
                        y=alt.Y('amount:Q', title='T·ªïng L√≠t'),
                        tooltip=['month','amount']
                    ).properties(height=240)
                    st.altair_chart(chart2, use_container_width=True)

        else:
            st.info("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì. H√£y nh·∫≠p ho·∫°t ƒë·ªông tr∆∞·ªõc.")

    with right:
        st.subheader("üìù Ghi ch√∫ nhanh & Nh·∫≠t k√Ω")
        # Quick note: g√°n cho l·∫ßn nh·∫≠p g·∫ßn nh·∫•t
        note_for_last = st.text_area("Ghi ch√∫ cho l·∫ßn nh·∫≠p g·∫ßn nh·∫•t (nh√≥m 30 ph√∫t):", height=120)
        if st.button("üíæ L∆∞u ghi ch√∫ cho l·∫ßn g·∫ßn nh·∫•t", use_container_width=True):
            # c·∫≠p nh·∫≠t ghi ch√∫ cho entry g·∫ßn nh·∫•t
            try:
                df_user = data[data['username']==username].copy()
                if df_user.empty:
                    st.warning("Ch∆∞a c√≥ ho·∫°t ƒë·ªông ƒë·ªÉ g·∫Øn ghi ch√∫.")
                else:
                    df_user['datetime'] = pd.to_datetime(df_user['date'].astype(str) + ' ' + df_user['time'].astype(str))
                    last_idx = df_user.sort_values('datetime', ascending=False).index[0]
                    old_note = str(data.at[last_idx, 'note']) if pd.notna(data.at[last_idx, 'note']) else ''
                    if note_for_last:
                        if old_note:
                            if note_for_last not in old_note:
                                data.at[last_idx, 'note'] = old_note + ' || ' + note_for_last
                        else:
                            data.at[last_idx, 'note'] = note_for_last
                        data.to_csv(DATA_FILE, index=False)
                        st.success('‚úÖ ƒê√£ l∆∞u ghi ch√∫ cho l·∫ßn nh·∫≠p g·∫ßn nh·∫•t.')
                        safe_rerun()
                    else:
                        st.warning('‚ö†Ô∏è Ghi ch√∫ r·ªóng, vui l√≤ng nh·∫≠p n·ªôi dung.')
            except Exception as e:
                st.error('C√≥ l·ªói khi l∆∞u ghi ch√∫: ' + str(e))

        st.markdown('---')
        # --- Nh·∫≠t k√Ω / Data Editor ---
        st.subheader('üìã Nh·∫≠t k√Ω ho·∫°t ƒë·ªông')
        user_data = data[data['username']==username].copy()
        if not user_data.empty:
            user_data['datetime'] = pd.to_datetime(user_data['date'].astype(str) + ' ' + user_data['time'].astype(str))
            user_data = user_data.sort_values('datetime', ascending=False).reset_index()
            # user_data's reset_index added original index as "index" column
            # T√≠nh t·ªïng theo ng√†y
            daily_sum = user_data.groupby('date')['amount'].sum().to_dict()
            user_data['T·ªïng L∆∞·ª£ng Ng√†y (L)'] = user_data['date'].map(daily_sum)

            def warning_label(amount):
                if amount < 0.8*daily_limit: return "üíö ·ªîn"
                elif amount <= 1.1*daily_limit: return "üü† G·∫ßn ng∆∞·ª°ng"
                else: return "üî¥ V∆∞·ª£t ng∆∞·ª°ng"
            user_data['C·∫£nh b√°o'] = user_data['T·ªïng L∆∞·ª£ng Ng√†y (L)'].apply(warning_label)
            user_data['X√≥a'] = False

            display_df = user_data[['date','time','activity','amount','T·ªïng L∆∞·ª£ng Ng√†y (L)','C·∫£nh b√°o','note','address','index']].copy()
            display_df = display_df.rename(columns={'index':'_orig_index'})
            # ·∫©n c·ªôt _orig_index khi hi·ªÉn th·ªã nh∆∞ng gi·ªØ ƒë·ªÉ map khi l∆∞u/x√≥a
            edited = st.data_editor(
                display_df.drop(columns=['_orig_index']),
                use_container_width=True,
                num_rows='dynamic',
                hide_index=True
            )

            cols_editable = ['activity','amount','note','address','X√≥a']
            # N√∫t l∆∞u thay ƒë·ªïi
            if st.button('üíæ L∆∞u thay ƒë·ªïi trong nh·∫≠t k√Ω'):
                try:
                    # l·∫•y c·ªôt _orig_index ƒë·ªÉ bi·∫øt mapping; v√¨ st.data_editor tr·∫£ v·ªÅ dataframe reorder index 0..n-1,
                    # ch√∫ng ta s·∫Ω l·∫•y l·∫°i _orig_index t·ª´ display_df theo v·ªã tr√≠
                    orig_indices = display_df['_orig_index'].tolist()
                    for i, orig_idx in enumerate(orig_indices):
                        for col in cols_editable:
                            if col in edited.columns:
                                data.at[orig_idx, col] = edited.iloc[i][col]
                    data.to_csv(DATA_FILE, index=False)
                    st.success('‚úÖ L∆∞u thay ƒë·ªïi th√†nh c√¥ng.')
                    safe_rerun()
                except Exception as e:
                    st.error('L∆∞u thay ƒë·ªïi th·∫•t b·∫°i: ' + str(e))

            if st.button('‚ùå X√≥a c√°c ho·∫°t ƒë·ªông ƒë√£ ch·ªçn'):
                try:
                    orig_indices = display_df['_orig_index'].tolist()
                    # t√¨m h√†ng c√≥ X√≥a True trong edited
                    to_delete_positions = [i for i,row in edited.iterrows() if ('X√≥a' in edited.columns and row['X√≥a']==True)]
                    if not to_delete_positions:
                        st.warning('‚ö†Ô∏è B·∫°n ch∆∞a ch·ªçn ho·∫°t ƒë·ªông n√†o ƒë·ªÉ x√≥a.')
                    else:
                        indices_to_drop = [orig_indices[pos] for pos in to_delete_positions]
                        data = data.drop(indices_to_drop).reset_index(drop=True)
                        data.to_csv(DATA_FILE, index=False)
                        st.success(f'‚úÖ ƒê√£ x√≥a {len(indices_to_drop)} ho·∫°t ƒë·ªông.')
                        safe_rerun()
                except Exception as e:
                    st.error('X√≥a th·∫•t b·∫°i: ' + str(e))

            # Download filtered user data
            if st.button('üì• T·∫£i to√†n b·ªô nh·∫≠t k√Ω (CSV)'):
                st.download_button('T·∫£i CSV', data[data['username']==username].to_csv(index=False), 'water_usage.csv', 'text/csv')

        else:
            st.info('Ch∆∞a c√≥ d·ªØ li·ªáu. H√£y nh·∫≠p ho·∫°t ƒë·ªông ƒë·ªÉ t·∫°o nh·∫≠t k√Ω.')

        st.markdown('---')
        # --- Pet ·∫£o ---
        st.subheader('üå± Tr·ªìng c√¢y ·∫£o')
        today_data = data[(data['username']==username) & (pd.to_datetime(data['date']).dt.date == datetime.now().date())]
        today_usage = today_data['amount'].sum() if not today_data.empty else 0
        if today_usage < 0.8*daily_limit:
            pet_emoji, pet_color, pet_msg = "üå≥","#3B82F6","C√¢y ƒëang ph√°t tri·ªÉn t∆∞∆°i t·ªët! üíö"
        elif today_usage <= 1.1*daily_limit:
            pet_emoji, pet_color, pet_msg = "üåø","#FACC15","C√¢y h∆°i h√©o, h√£y ti·∫øt ki·ªám th√™m ‚ö†Ô∏è"
        else:
            pet_emoji, pet_color, pet_msg = "ü•Ä","#EF4444","C√¢y ƒëang h√©o üò¢"
        st.markdown(f"<div style='font-size:60px;text-align:center'>{pet_emoji}</div>", unsafe_allow_html=True)
        st.markdown(f"<div style='padding:14px;border-radius:12px;background:{pet_color};color:white;font-weight:bold;text-align:center;font-size:18px;'>{pet_msg}</div>", unsafe_allow_html=True)

        # Logout
        if st.button("üö™ ƒêƒÉng xu·∫•t", use_container_width=True):
            st.session_state.logged_in=False
            st.session_state.username=None
            safe_rerun()

# ----------------- Main -----------------
def main():
    st.set_page_config(page_title="Water Loop App", page_icon="üíß", layout="centered")
    if "logged_in" not in st.session_state or not st.session_state.logged_in:
        login_register()
    else:
        water_dashboard()

if __name__=="__main__":
    main()


